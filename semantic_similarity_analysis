{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nhiLHgM7b4Pp"
      },
      "source": [
        "Semantic Similarity Linguistic Analysis\n",
        "\n",
        "# Introduction\n",
        "\n",
        "Classroom communication plays a pivotal role in influencing students’ academic performance [1]. While existing research predominantly focuses on students' language development, effective communication involves the creation of shared meaning between teachers and students. It is imperative to analyze how teachers deliver instruction to foster effective language use within classrooms. Clarity in teacher language involves the use of concrete, explicit, and fluent language, incorporating vocabulary and content-related words [2, 3]. Research suggests unclear language negatively affects student achievement, particularly for students with lower language proficiency [4, 5]. Clear language use not only benefits all students but proves especially advantageous for students with academic and behavioral support needs. Furthermore, teachers who skillfully use appropriate sequencing and scaffolding language strategies effectively break down complex skills into manageable units, addressing cognitive overload and considering students’ working memory. Teachers’ ability to respond to and expand upon student responses through feedback, follow-up explanations, and/or questioning techniques is critical to students’ learning and engagement during teacher-directed instruction [10, 11].\n",
        "\n",
        "Traditional observational tools used to measure teacher talk often include high-inference, binary judgments that lack the granularity needed for self-reflection and improvement in teacher practice [6]. Natural language processing (NLP) technology offers a potential avenue for transforming the assessment of teacher practice and subsequent professional development efforts.\n",
        "\n",
        "This study extends the recent work of previous classroom researchers employing NLP technology to measure teacher discourse by investigating the cohesiveness of teacher language across a lesson. The overarching goal is to explore whether the cohesiveness of teacher utterances measured with NLP tools is associated with human observation measures used for measuring instructional dialogue.\n",
        "\n",
        "This analysis assessed the cohesiveness of teacher and student discourse during classroom instruction to explore its relationship with two widely used observational measures of instructional quality. The study used classroom transcripts drawn from a nationally representative dataset of observations in elementary math classrooms [7]. Each transcript was paired with corresponding quality ratings from Classroom Atmosphere Scoring System (CLASS) observations and Mathematical Quality of Instruction (MQI) completed by expert raters. The CLASS is an observational tool used to assess teacher and student social and instructional interactions, as well as the intentionality and productivity of the classroom context [8]. The MQI is an observational tool used to assess teachers’ math instructional practice. This study focused on the Instructional Dialogue dimension from the CLASS measure and the Teacher Use of Student Contribution variable from the MQI measure.\n",
        "To assess the cohesiveness of teachers and student discourse, spaCy was used to calculate the semantic similarity between adjacent teacher-to-student utterances, adjacent teacher-to-teacher utterances, and adjacent student-to-student utterances. This was completed for all words included in the transcripts and exclusively for the content words in each utterance. This analysis examines the teacher-to-student, teacher-to-teacher, and student-to-student utterances’ semantic similarity and their relation to the quality ratings for Instructional Dialogue CLASS scores and teacher-to-student semantic similarity to the Teacher Use of Student Contribution MQI scores.\n",
        "\n",
        "**The research question that guides this study is:**\n",
        "\n",
        "1. Does the semantic similarity of adjacent teacher-to-student, teacher-to-teacher, and student-to-student utterances relate to the quality ratings for Instructional Dialogue scored via Classroom Scoring System (CLASS) observations?\n",
        "2. Does the semantic similarity of adjacent teacher-to-student utterances relate to the quality ratings for Teacher\n",
        "Use of Student Contribution scored via Mathematical\n",
        "Quality of Instruction (MQI) observations?\n",
        "\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "XBG662ZwQEOh"
      },
      "source": [
        "# Method\n",
        "## Dataset\n",
        "The open-source National Center for Teacher Effectiveness(NCTE) transcript dataset includes anonymized transcripts from teachers’classroom observations from the NCTE Main Study [Kane]. The observations occurred between 2010-2013 in 4th and 5th-grade elementary math classrooms across four districts, predominately serving historically marginalized students. The transcripts are linked with a variety of outcome variables including classroom observation scores, demographic information, survey responses, and student scores. The dataset can be found at: https://github.com/ddemszky/classroom-transcript-analysis. This analysis focused on the use of the classroom transcripts and linked the Classroom Atmosphere Scoring System (CLASS) data.\n",
        "\n",
        "<ul type=\"none\">\n",
        "  <li>Classroom Transcripts</li>\n",
        "    <ul>\n",
        "     <li>This analysis includes 1325 observation transcripts from 301 teachers, each with an average of 4 transcripts. Classroom lessons were captured using three cameras, a lapel microphone for teacher talk, and a bidirectional microphone for student talk. The recordings were transcribed by professional transcribers working under contract for a commercial transcription company.\n",
        "     \n",
        "The transcripts were organized by speaker turns (teacher, students, multiple students) where each row of the transcript data frame represents a speaker turn or utterance that may contain one or more speech acts or \"sentences\". In this analysis, student talk was removed and only teacher turns were analyzed. On average, the transcripts contain 5,733 words, with 87.7% of which are spoken by the teachers, and with 172 teacher utterances per transcript.\n",
        "     \n",
        "The transcripts are fully anonymized: student and teacher names are replaced with terms like “Student J”, “Teacher” or “Mrs. H”. Transcribers used square brackets to indicate when speech was [Inaudible], if they were unsure of a particular word due to audio quality, or to include meta-data such as [laughter], [students putting away materials]. All bracketed information was removed from the transcripts for this analysis.  </li>\n",
        "     </ul>\n",
        "</ul>\n",
        "\n",
        "  <li>Classroom Atmosphere Scoring System (CLASS) </li>\n",
        "    <ul>\n",
        "      <li> The CLASS includes 3 domains and 11 sub-dimensions measuring teacher-student interactions. This analysis includes the overall CLASS score, the Instructional Support domain, and the Instructional Dialogue dimension. Observers score each dimension using a 7-point scale.\n",
        "      </ul>\n",
        "      </ul>\n",
        "\n",
        "  <li>Mathematical Quality of Instruction (MQI)</li>\n",
        "    <ul>\n",
        "      <li> The Mathematical Quality of Instruction (MQI) instrument is used to measure the quality of math instruction across five elements: richness of the mathematics; errors and imprecision; working with students and mathematics; student participation in meaning-making and reasoning; and connections between classroom work and mathematics. This analysis includes the Teacher’s Use of Student Contribution scores from the working with students and mathematics element. Observers scored each item using a 4-point scale.\n",
        "      </ul>\n",
        "      </ul>\n",
        "\n",
        "\n",
        "\n",
        "## Linguistic Analysis\n",
        "The analysis of semantic similarity aimed to assess thecohesion of teachers’ discourse by calculating the similarity between theiradjacent utterances. Two distinct analyses were conducted to provide a richer understanding of semantic similarity in teacher discourse: one considering all words and the other focusing solely on content words.\n",
        "\n",
        "For the analysis that included all the words, punctuationwas removed from the original NCTE transcripts. This step was critical due tothe arbitrary nature of punctuation in the transcription of spoken language, where people often express themselves without strictly adhering to conventional written sentence structures, especially in a context such as a classroom. Eliminating punctuation ensured the analysis focused on the teachers’ words and the semantic similarity scores were not impacted by punctuation. For the analysis that included only content words, The Natural Language Toolkit (NLTK) was used to remove stop words, a predetermined set ofcommonly used words (e.g., a, the, is) that carry minimal useful information.\n",
        "\n",
        "By filtering out the stop words, the analysis isolated essential content words,providing a focused examination of words carrying the primary message in theteachers’ utterances. Both of the analyses used spaCy’s large English model to calculate the semantic similarity scores. The spaCy model uses Word2Vec embedding to represent words as dense vectors in a continuous vector space and captures semantic relationships based on their contextual usage in a large corpus. When calculating semantic similarity, SpaCy uses these pre-trained word embeddingsto measure the similarity between individual words, sentences, or documents. Forthis analysis, spaCy’s ‘doc.similarity’ function treated each teacher utteranceas a document. Each utterance, whether comprising one word, one statement, or multiplestatements, was compared to the adjacent utterance.  The resulting output was floating-pointnumbers ranging from 0 to 1, indicating the degree of similarity between thetwo utterances.\n",
        "\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wjX5CjOXVm4F"
      },
      "source": [
        "# NLP Analysis\n",
        "\n",
        "The steps were taken for the NLP analysis:\n",
        "1. Read in the transcript and CLASS data\n",
        "2. Clean the transcript dataframe\n",
        "3. Load the spaCy package\n",
        "4. Remove stop words and punctuation\n",
        "5. Calculate semantic similarity scores for teacher & students, teacher only utterances, and students only utterances\n",
        "6. Save final dataframe to .csv file"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RHjIRF1wkYWL"
      },
      "source": [
        "### 1. Reading in transcripts and outcome data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "oZ6AuoiWkvbG",
        "outputId": "fc20506a-0ab3-422f-f517-31d554120b96"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Mounted at /content/drive\n"
          ]
        }
      ],
      "source": [
        "# Load the Google Drive helper\n",
        "from google.colab import drive\n",
        "# mounting my drive to make it available\n",
        "drive.mount('/content/drive')"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0LUuypRrmky2",
        "outputId": "c6374f75-4399-499a-b18d-b8f0b28d06a7"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "['class_data.csv',\n",
              " 'ncte_single_utterances.csv',\n",
              " 'ncte_single_utterances_dashesremoved.numbers',\n",
              " 'ncte_single_utterances_dashesremoved.csv',\n",
              " 'ncte_teacher_similarity_scores.csv',\n",
              " 'ncte_test_text.csv',\n",
              " 'Screenshot 2023-12-13 at 10.26.59\\u202fPM.png',\n",
              " 'Screenshot 2023-12-13 at 10.27.27\\u202fPM.png',\n",
              " 'Screenshot 2023-12-13 at 10.27.42\\u202fPM.png',\n",
              " 'Screenshot 2023-12-13 at 10.27.15\\u202fPM.png',\n",
              " 'ncte_teacher_similarityscores.csv',\n",
              " 'ncte_utterances_final_semanticsimilarity.csv',\n",
              " 'ncte_teacher_similarityscores_2.csv',\n",
              " 'ncte_student_similarityscores.csv']"
            ]
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "source": [
        "#navigating to the google drive folder where the data is located\n",
        "import os #package for figuring out operating system\n",
        "\n",
        "os.getcwd() #wcurrent working directory\n",
        "os.listdir() #files in the currrent working directory\n",
        "os.chdir(\"drive/MyDrive/Colab_Notebooks/TextAnalytics_Final\") #change directory to where the data is saved\n",
        "os.listdir() #file I need is located in this folder"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "I6zq4tUKKh14"
      },
      "source": [
        "**Reading in the classroom transcripts' csv file**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "-yuM0x9-i8zP"
      },
      "outputs": [],
      "source": [
        "#import pandas\n",
        "import pandas as pd\n",
        "\n",
        "#read in the .csv file that includes the observation transcripts\n",
        "ncte_utterances = pd.read_csv('ncte_single_utterances_dashesremoved.csv', encoding = \"utf-8\", usecols=['speaker','text','OBSID']) #utf-8 due to apostrophes in the dataframe being read in as odd unicode symbols\n",
        "\n",
        "#reorder columns\n",
        "ncte_utterances = ncte_utterances.reindex(columns=['OBSID', 'speaker', 'text'])\n",
        "\n",
        "#lower casing everything in the text column\n",
        "ncte_utterances['text'] = ncte_utterances['text'].str.lower()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "VyYMn-Kdi8zR",
        "outputId": "fef252c2-b439-41bd-cd59-926e510adb5a"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   OBSID            speaker                                               text\n",
              "0   2119            teacher  friends, yesterday we started off by working o...\n",
              "1   2119            student                                               yes.\n",
              "2   2119            teacher  and yesterday towards the end of the period, y...\n",
              "3   2119  multiple students                                               yes.\n",
              "4   2119            teacher  some of you might be done. if you are finished...\n",
              "5   2119            student   can we find new ways to check it or [inaudible]?\n",
              "6   2119            teacher  well, the best way to check it is going to be ...\n",
              "7   2119            student                         can you [find] the gallon?\n",
              "8   2119            student                               i don't know how to.\n",
              "9   2119            teacher  i guess draw it basically remember yesterday w..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-458fc344-4d34-4627-9bb8-3f487757ae4e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or [inaudible]?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you [find] the gallon?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i don't know how to.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-458fc344-4d34-4627-9bb8-3f487757ae4e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-458fc344-4d34-4627-9bb8-3f487757ae4e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-458fc344-4d34-4627-9bb8-3f487757ae4e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-ff682ef1-4810-43eb-b005-1605c7d018d0\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-ff682ef1-4810-43eb-b005-1605c7d018d0')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-ff682ef1-4810-43eb-b005-1605c7d018d0 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 4
        }
      ],
      "source": [
        "# looking at the first 10 rows of the data\n",
        "ncte_utterances.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YIFUcyHYBam-"
      },
      "source": [
        "Clean the text"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "iuMtRe1hBZw_"
      },
      "outputs": [],
      "source": [
        "# there are some non alphabetic characters included in the text due to transcription and encoding variations\n",
        "\n",
        "def clean_text(text):\n",
        "    text = text.replace('¾', 'three-fourths')\n",
        "    text = text.replace('½', 'one-half')\n",
        "    text = text.replace('é', 'e')\n",
        "    text = text.replace('¼', 'one-fourth')\n",
        "    text = text.replace('à', 'a')\n",
        "    text = text.replace('ĕ', 'e')\n",
        "    text = text.replace('ē', 'e')\n",
        "    text = text.replace('°', ' degrees')\n",
        "    return text\n",
        "\n",
        "# Apply the clean_text function to the 'text' column\n",
        "ncte_utterances['text'] = ncte_utterances['text'].apply(clean_text)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nl_Iq9QgoBs_"
      },
      "source": [
        "Remove meta-data\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "47d9uz-FhT_h"
      },
      "outputs": [],
      "source": [
        "#we can see meta-data included in the text above. The meta-data are indicated by square brackets []\n",
        "\n",
        "import re\n",
        "\n",
        "# Define a regex pattern to match the square brackets and the metadata within them\n",
        "pattern = r'\\[.*?\\]'\n",
        "\n",
        "# Use the re.sub() function to remove the square brackets and metadata\n",
        "ncte_utterances['text'] = ncte_utterances['text'].apply(lambda x: re.sub(pattern, '', x))"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "w2IZkZgNnimG",
        "outputId": "0232ef3e-c0dd-44aa-e265-fda54da58147"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   OBSID            speaker                                               text\n",
              "0   2119            teacher  friends, yesterday we started off by working o...\n",
              "1   2119            student                                               yes.\n",
              "2   2119            teacher  and yesterday towards the end of the period, y...\n",
              "3   2119  multiple students                                               yes.\n",
              "4   2119            teacher  some of you might be done. if you are finished...\n",
              "5   2119            student              can we find new ways to check it or ?\n",
              "6   2119            teacher  well, the best way to check it is going to be ...\n",
              "7   2119            student                               can you  the gallon?\n",
              "8   2119            student                               i don't know how to.\n",
              "9   2119            teacher  i guess draw it basically remember yesterday w..."
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-d3ddcd22-5bb9-4332-bace-6eeed3d05a0b\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i don't know how to.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-d3ddcd22-5bb9-4332-bace-6eeed3d05a0b')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-d3ddcd22-5bb9-4332-bace-6eeed3d05a0b button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-d3ddcd22-5bb9-4332-bace-6eeed3d05a0b');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-587314f0-25bc-4f2d-89ac-befd76fe0338\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-587314f0-25bc-4f2d-89ac-befd76fe0338')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-587314f0-25bc-4f2d-89ac-befd76fe0338 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "ncte_utterances.head(10) #check that meta-data are removed"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "VsvO6qmvpZxQ",
        "outputId": "9159d9da-17c4-481b-ffac-fd3066185319"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(580408, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "#get dimensions\n",
        "ncte_utterances.shape"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "AC-fKdOnpl90"
      },
      "source": [
        "Remove rows that now only have a period because of removing meta-data"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "GR-ejG8epRXQ"
      },
      "outputs": [],
      "source": [
        "# Remove rows containing only \".\"\n",
        "ncte_utterances = ncte_utterances[ncte_utterances != \".\"].dropna()"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "jvlUe36PpSkB",
        "outputId": "0f2d9a86-feff-4729-9bda-138e2f8cdb08"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(554784, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 10
        }
      ],
      "source": [
        "#get dimensions\n",
        "ncte_utterances.shape\n",
        "\n",
        "#looks like the above removed about 25,000 rows that did not contain text"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "Combine the text for adjacent student speaker turns"
      ],
      "metadata": {
        "id": "zj7mI3yWdykA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Step 1: Mark rows of interest\n",
        "ncte_utterances['is_student_speaker'] = ncte_utterances['speaker'].isin(['student', 'multiple students'])\n",
        "\n",
        "# Step 2: Create a group identifier for all rows\n",
        "ncte_utterances['group'] = ((ncte_utterances['is_student_speaker'] != ncte_utterances['is_student_speaker'].shift()) | (ncte_utterances['speaker'] == 'teacher')).cumsum()\n",
        "\n",
        "# Step 3: Combine text within each group for student speakers\n",
        "combined_text = ncte_utterances.groupby('group').apply(lambda df: ' '.join(df['text']) if df['is_student_speaker'].iloc[0] else df['text'].iloc[0]).reset_index(name='combined_text')\n",
        "\n",
        "# Merge the combined text back into the original DataFrame based on the group identifier\n",
        "ncte_utterances_combined = ncte_utterances.drop('text', axis=1).merge(combined_text, on='group')\n",
        "\n",
        "# Step 4: Keep only the first row from each student speaker group and all teacher rows\n",
        "ncte_utterances_final = ncte_utterances_combined.drop_duplicates(subset=['group'], keep='first').copy()  # Added .copy() here\n",
        "\n",
        "# Drop temporary columns, now safely operating on a copy\n",
        "ncte_utterances_final.drop(['is_student_speaker', 'group'], axis=1, inplace=True)\n",
        "\n",
        "# Rename 'combined_text' back to 'text', also on the copy\n",
        "ncte_utterances_final.rename(columns={'combined_text': 'text'}, inplace=True)\n"
      ],
      "metadata": {
        "id": "zfaAGgGKdw2t"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_utterances_final.head(10) #check that the text for adjacent student turns were combined"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "jIa8iVE8heHx",
        "outputId": "bcca0a4d-701a-4124-9cb7-c3775e12c0e8"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "0    2119            teacher   \n",
              "1    2119            student   \n",
              "2    2119            teacher   \n",
              "3    2119  multiple students   \n",
              "4    2119            teacher   \n",
              "5    2119            student   \n",
              "6    2119            teacher   \n",
              "7    2119            student   \n",
              "9    2119            teacher   \n",
              "10   2119            student   \n",
              "\n",
              "                                                 text  \n",
              "0   friends, yesterday we started off by working o...  \n",
              "1                                                yes.  \n",
              "2   and yesterday towards the end of the period, y...  \n",
              "3                                                yes.  \n",
              "4   some of you might be done. if you are finished...  \n",
              "5               can we find new ways to check it or ?  \n",
              "6   well, the best way to check it is going to be ...  \n",
              "7           can you  the gallon? i don't know how to.  \n",
              "9   i guess draw it basically remember yesterday w...  \n",
              "10  i can make it like that. that's the way it fil...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8229804c-8853-4cbe-bd83-3ef97dd10524\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8229804c-8853-4cbe-bd83-3ef97dd10524')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-8229804c-8853-4cbe-bd83-3ef97dd10524 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-8229804c-8853-4cbe-bd83-3ef97dd10524');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-a3425f1a-734f-4473-ba5d-c17a3041713c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a3425f1a-734f-4473-ba5d-c17a3041713c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-a3425f1a-734f-4473-ba5d-c17a3041713c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2PTItbmrNdLZ"
      },
      "source": [
        "**Read in the CLASS outcome variables**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "eZiO2Lz1NbwB"
      },
      "outputs": [],
      "source": [
        "#read in the .csv file that includes the text and outcome variables\n",
        "class_data = pd.read_csv('class_data.csv', encoding = \"ISO-8859-1\", usecols=['OBSID','instructional_dialogue','instruct_support','overall_score'])\n",
        "#usecols to select only the variables related to instructional dialogue, as well as teachers ID numbers named OBSID"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "zr2H5FedOhjF",
        "outputId": "35513b2f-11c2-4a09-d2ea-84979c987baf"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "   OBSID  instructional_dialogue  instruct_support  overall_score\n",
              "0     33                4.250000          4.000000       4.863636\n",
              "1    128                3.333333          3.800000       4.090909\n",
              "2    455                3.750000          3.550000       4.522727\n",
              "3     30                5.000000          5.000000       5.272727\n",
              "4    130                2.333333          2.800000       4.030303\n",
              "5    585                4.000000          4.250000       5.090909\n",
              "6   4250                3.000000          3.300000       3.818182\n",
              "7   4599                5.750000          5.200000       5.500000\n",
              "8   4678                3.000000          3.150000       3.954545\n",
              "9   2191                4.333333          4.066667       4.575758"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-006c91be-eebc-41e0-ae69-03dc4c2d06cf\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>instructional_dialogue</th>\n",
              "      <th>instruct_support</th>\n",
              "      <th>overall_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>33</td>\n",
              "      <td>4.250000</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.863636</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>128</td>\n",
              "      <td>3.333333</td>\n",
              "      <td>3.800000</td>\n",
              "      <td>4.090909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>455</td>\n",
              "      <td>3.750000</td>\n",
              "      <td>3.550000</td>\n",
              "      <td>4.522727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>30</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.000000</td>\n",
              "      <td>5.272727</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>130</td>\n",
              "      <td>2.333333</td>\n",
              "      <td>2.800000</td>\n",
              "      <td>4.030303</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>585</td>\n",
              "      <td>4.000000</td>\n",
              "      <td>4.250000</td>\n",
              "      <td>5.090909</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>4250</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.300000</td>\n",
              "      <td>3.818182</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>4599</td>\n",
              "      <td>5.750000</td>\n",
              "      <td>5.200000</td>\n",
              "      <td>5.500000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>4678</td>\n",
              "      <td>3.000000</td>\n",
              "      <td>3.150000</td>\n",
              "      <td>3.954545</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2191</td>\n",
              "      <td>4.333333</td>\n",
              "      <td>4.066667</td>\n",
              "      <td>4.575758</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-006c91be-eebc-41e0-ae69-03dc4c2d06cf')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-006c91be-eebc-41e0-ae69-03dc4c2d06cf button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-006c91be-eebc-41e0-ae69-03dc4c2d06cf');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-6f19c9b9-53d3-45ff-8870-62698a0f5164\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-6f19c9b9-53d3-45ff-8870-62698a0f5164')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-6f19c9b9-53d3-45ff-8870-62698a0f5164 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ],
      "source": [
        "#we can see the observation ID number that will be used to join the sentiment similarity scores with the CLASS scores later as well as the outcome variables\n",
        "class_data.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MUJfGoTXrhll"
      },
      "source": [
        "**Keep only the observation indentifiers (OBSID) that exist in both dataframes**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Jya0bNgbrUE9"
      },
      "outputs": [],
      "source": [
        "# Get the OBSIDs that exist in both data frames\n",
        "common_OBSIDs = ncte_utterances_final['OBSID'].isin(class_data['OBSID'])\n",
        "\n",
        "# Filter the 'ncte_utterances' data frame to keep only the OBSIDs that exist in 'class_data'\n",
        "ncte_utterances_final = ncte_utterances_final[common_OBSIDs]"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "2MmOhqVzrsDq",
        "outputId": "c960186a-8559-4a7c-e653-60bfefda8d1c"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(383114, 3)"
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ],
      "source": [
        "#get dimensions\n",
        "ncte_utterances_final.shape\n",
        "\n",
        "#the above code appears to have removed about 150,000 rows from observation IDs that were not in the class data. Removing these observations before the NLP analysis will save some compute time."
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tn1qiXsasQSM",
        "outputId": "ebcd1c0e-fc4c-474a-c572-6997facf5786"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Number of unique OBSIDs in class_data: 1325\n",
            "Number of unique OBSIDs in ncte_utterances: 1325\n"
          ]
        }
      ],
      "source": [
        "# Calculate the number of unique OBSIDs in the 'ncte_utterances' data frame\n",
        "num_unique_ncte_OBSIDs = ncte_utterances_final['OBSID'].nunique()\n",
        "num_unique_class_OBSIDs = class_data['OBSID'].nunique()\n",
        "\n",
        "# Print the number of unique OBSIDs\n",
        "print(\"Number of unique OBSIDs in class_data:\", num_unique_ncte_OBSIDs)\n",
        "print(\"Number of unique OBSIDs in ncte_utterances:\", num_unique_class_OBSIDs)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4lVk-r5MEugF"
      },
      "source": [
        "### 3. Load in spaCy, NLTK, & string"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "YHVBowjri8zT",
        "outputId": "39534854-c2b7-471d-8393-1c6e9ac3d3b7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[38;5;2m✔ Download and installation successful\u001b[0m\n",
            "You can now load the package via spacy.load('en_core_web_lg')\n"
          ]
        }
      ],
      "source": [
        "import spacy\n",
        "import spacy.cli #spacy command line interface\n",
        "\n",
        "spacy.cli.download(\"en_core_web_lg\") #downloading large model so that word vectors are available for the semantic similarity analysis\n",
        "\n",
        "nlp = spacy.load(\"en_core_web_lg\") #call for the spacy model"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "JEKVZ3skcrh-",
        "outputId": "bc554acd-094e-4af4-830f-f9af47223985"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "[nltk_data] Downloading package stopwords to /root/nltk_data...\n",
            "[nltk_data]   Unzipping corpora/stopwords.zip.\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "True"
            ]
          },
          "metadata": {},
          "execution_count": 19
        }
      ],
      "source": [
        "import nltk\n",
        "from nltk.corpus import stopwords #will be used to remove stop words\n",
        "import string #will be used to remove punctuation\n",
        "\n",
        "nltk.download('stopwords')"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 4. Remove punctuation and remove stop words"
      ],
      "metadata": {
        "id": "omK3u0lnmo13"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2co__3zHKFNa"
      },
      "source": [
        "**Remove Stop Words and Punctuation**\n",
        "\n",
        "In this section, punctuation is removed from the text column to create a new \"text_no_punctuation\" column which will allow us to calculate semantic similarity on all text in the transcripts then stop words are removed to create a new \"content_words\" column which will allow us to calculate semantic similarity on only the content words within the transcripts"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "6mVgA00XlZVA"
      },
      "source": [
        "**Using string.punctuation and regular expression to remove only punctuation**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "fgQi1r2tWGzI"
      },
      "outputs": [],
      "source": [
        "def remove_punctuation(text):\n",
        "    additional_punctuations = ['“', '”', '‘', '…', '−', '’', '—']  # stubborn punctuation that was not successfully getting removed with string.punctuation\n",
        "    punctuation_pattern = '[' + re.escape(string.punctuation) + ''.join(map(re.escape, additional_punctuations)) + ']'\n",
        "    cleaned_text = re.sub(punctuation_pattern, '', text)\n",
        "    return cleaned_text\n",
        "\n",
        "# Apply the remove_punctuation function to the 'text' column\n",
        "ncte_utterances_final['text_no_punctuation'] = ncte_utterances_final['text'].apply(remove_punctuation)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "1T9WL5bs3y2c",
        "outputId": "189a6e52-d74b-4abc-e9a2-c63156a8fbdd"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "0    2119            teacher   \n",
              "1    2119            student   \n",
              "2    2119            teacher   \n",
              "3    2119  multiple students   \n",
              "4    2119            teacher   \n",
              "5    2119            student   \n",
              "6    2119            teacher   \n",
              "7    2119            student   \n",
              "9    2119            teacher   \n",
              "10   2119            student   \n",
              "\n",
              "                                                 text  \\\n",
              "0   friends, yesterday we started off by working o...   \n",
              "1                                                yes.   \n",
              "2   and yesterday towards the end of the period, y...   \n",
              "3                                                yes.   \n",
              "4   some of you might be done. if you are finished...   \n",
              "5               can we find new ways to check it or ?   \n",
              "6   well, the best way to check it is going to be ...   \n",
              "7           can you  the gallon? i don't know how to.   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "10  i can make it like that. that's the way it fil...   \n",
              "\n",
              "                                  text_no_punctuation  \n",
              "0   friends yesterday we started off by working on...  \n",
              "1                                                 yes  \n",
              "2   and yesterday towards the end of the period yo...  \n",
              "3                                                 yes  \n",
              "4   some of you might be done if you are finished ...  \n",
              "5                can we find new ways to check it or   \n",
              "6   well the best way to check it is going to be t...  \n",
              "7              can you  the gallon i dont know how to  \n",
              "9   i guess draw it basically remember yesterday w...  \n",
              "10  i can make it like that thats the way it fills...  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-1303b284-ea45-46e9-a437-b787b57c197e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "      <td>friends yesterday we started off by working on...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "      <td>and yesterday towards the end of the period yo...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "      <td>some of you might be done if you are finished ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "      <td>can we find new ways to check it or</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "      <td>well the best way to check it is going to be t...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "      <td>can you  the gallon i dont know how to</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "      <td>i can make it like that thats the way it fills...</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1303b284-ea45-46e9-a437-b787b57c197e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-1303b284-ea45-46e9-a437-b787b57c197e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-1303b284-ea45-46e9-a437-b787b57c197e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0a1021b6-b421-46c2-bf5f-2657d46b1996\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a1021b6-b421-46c2-bf5f-2657d46b1996')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0a1021b6-b421-46c2-bf5f-2657d46b1996 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 21
        }
      ],
      "source": [
        "ncte_utterances_final.head(10)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "aL2OfGvG3-7r",
        "outputId": "8f1b16c6-0d68-45b2-de9b-5127195d46bb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Stubborn Punctuations: ['4' '2' '1' '5' '7' '8' '0' '9' '3' '6']\n"
          ]
        }
      ],
      "source": [
        "# Check for remaining stubborn punctuations in the 'text_no_punctuation' column\n",
        "stubborn_punctuations = ncte_utterances_final['text_no_punctuation'].str.extractall(r'([^a-zA-Z\\s])')[0].unique()\n",
        "\n",
        "# Print the stubborn punctuations\n",
        "print(\"Stubborn Punctuations:\", stubborn_punctuations)\n",
        "\n",
        "#only numbers remain which are fine to stay in this analysis"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "MNntK-7MNF8x"
      },
      "source": [
        "**Using NLTK stopwords list to remove stop words**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "ikoHwf0fKIvJ"
      },
      "outputs": [],
      "source": [
        "def remove_stopwords(text):\n",
        "    stop_words = set(stopwords.words('english'))\n",
        "    words = [word for word in text.split() if word.lower() not in stop_words]\n",
        "    cleaned_text = ' '.join(words)\n",
        "    return cleaned_text\n",
        "\n",
        "ncte_utterances_final['content_words'] = ncte_utterances_final['text_no_punctuation'].apply(remove_stopwords)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "6WBcTFLFMT-T",
        "outputId": "9e7d9ba9-2b48-4c94-a262-5a7667678b55"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "0    2119            teacher   \n",
              "1    2119            student   \n",
              "2    2119            teacher   \n",
              "3    2119  multiple students   \n",
              "4    2119            teacher   \n",
              "5    2119            student   \n",
              "6    2119            teacher   \n",
              "7    2119            student   \n",
              "9    2119            teacher   \n",
              "10   2119            student   \n",
              "\n",
              "                                                 text  \\\n",
              "0   friends, yesterday we started off by working o...   \n",
              "1                                                yes.   \n",
              "2   and yesterday towards the end of the period, y...   \n",
              "3                                                yes.   \n",
              "4   some of you might be done. if you are finished...   \n",
              "5               can we find new ways to check it or ?   \n",
              "6   well, the best way to check it is going to be ...   \n",
              "7           can you  the gallon? i don't know how to.   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "10  i can make it like that. that's the way it fil...   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "0   friends yesterday we started off by working on...   \n",
              "1                                                 yes   \n",
              "2   and yesterday towards the end of the period yo...   \n",
              "3                                                 yes   \n",
              "4   some of you might be done if you are finished ...   \n",
              "5                can we find new ways to check it or    \n",
              "6   well the best way to check it is going to be t...   \n",
              "7              can you  the gallon i dont know how to   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "10  i can make it like that thats the way it fills...   \n",
              "\n",
              "                                        content_words  \n",
              "0   friends yesterday started working word problem...  \n",
              "1                                                 yes  \n",
              "2   yesterday towards end period got word problem ...  \n",
              "3                                                 yes  \n",
              "4   might done finished look make sure happy way d...  \n",
              "5                                 find new ways check  \n",
              "6   well best way check going draw picture math pa...  \n",
              "7                                    gallon dont know  \n",
              "9   guess draw basically remember yesterday showed...  \n",
              "10                      make like thats way fills gas  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-c9c421e6-bd27-4eaf-9333-7b286430382e\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "      <td>friends yesterday we started off by working on...</td>\n",
              "      <td>friends yesterday started working word problem...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "      <td>and yesterday towards the end of the period yo...</td>\n",
              "      <td>yesterday towards end period got word problem ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "      <td>some of you might be done if you are finished ...</td>\n",
              "      <td>might done finished look make sure happy way d...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "      <td>can we find new ways to check it or</td>\n",
              "      <td>find new ways check</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "      <td>well the best way to check it is going to be t...</td>\n",
              "      <td>well best way check going draw picture math pa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "      <td>can you  the gallon i dont know how to</td>\n",
              "      <td>gallon dont know</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>guess draw basically remember yesterday showed...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "      <td>i can make it like that thats the way it fills...</td>\n",
              "      <td>make like thats way fills gas</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-c9c421e6-bd27-4eaf-9333-7b286430382e')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-c9c421e6-bd27-4eaf-9333-7b286430382e button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-c9c421e6-bd27-4eaf-9333-7b286430382e');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-0a472f0d-723c-4509-9340-1085294a344c\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-0a472f0d-723c-4509-9340-1085294a344c')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-0a472f0d-723c-4509-9340-1085294a344c button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 24
        }
      ],
      "source": [
        "# check dataframe\n",
        "ncte_utterances_final.head(10)"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Sj-VxpnkKJ1Z"
      },
      "source": [
        "### 5. Semantic Similarity for Teacher & Student Utterances\n",
        "\n",
        "Semantic similarity is calculated for the comparisons for all words and content words and both similarity score lists are added to the data frame."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "YwfIDq4PjpgN"
      },
      "source": [
        "**For all words (text_no_punctuation)**"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# Process the texts using nlp.pipe for efficiency\n",
        "ncte_data_docs = list(nlp.pipe(ncte_utterances_final['text_no_punctuation']))\n",
        "\n",
        "doc_similarity = []  # Holder list for spacy docs semantic similarity\n",
        "\n",
        "# No need to iterate over ncte_data_docs just to copy them to another list\n",
        "\n",
        "# Calculate semantic similarity between consecutive documents\n",
        "for i in range(len(ncte_data_docs) - 1):  # Iterate through the range of documents\n",
        "    j = i + 1  # Compare with the next document to the previous one\n",
        "\n",
        "    # Check if either of the documents is empty (no text because the original document was empty or got removed in cleaning)\n",
        "    if ncte_data_docs[i].text == '' or ncte_data_docs[j].text == '':\n",
        "        similarity_score = 0  # Any time there is no text in one row to compare to the other, give it a semantic similarity score of 0\n",
        "    elif ncte_data_docs[i].has_vector and ncte_data_docs[j].has_vector:\n",
        "        similarity_score = ncte_data_docs[i].similarity(ncte_data_docs[j])  # Compare sentences and assign them a value similarity score\n",
        "    else:\n",
        "        similarity_score = 0  # This takes care of empty vectors\n",
        "\n",
        "    doc_similarity.append(similarity_score)"
      ],
      "metadata": {
        "id": "ch5vpq4D1IAS"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Append a similarity score of 0 for the last document\n",
        "doc_similarity.append(0)\n",
        "\n",
        "# Add the 'similar_score' column in the Pandas dataframe that contains the semantic similarity scores calculated for each comparison\n",
        "ncte_utterances_final['alltext_similar_score'] = doc_similarity"
      ],
      "metadata": {
        "id": "AA4VDLEy1bXz"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_utterances_final.head(10) #double checking dataframe contains scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 467
        },
        "id": "qRHKyYjK-LNz",
        "outputId": "32255cfe-4e46-41dc-8a63-f6bc5a58e140"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "0    2119            teacher   \n",
              "1    2119            student   \n",
              "2    2119            teacher   \n",
              "3    2119  multiple students   \n",
              "4    2119            teacher   \n",
              "5    2119            student   \n",
              "6    2119            teacher   \n",
              "7    2119            student   \n",
              "9    2119            teacher   \n",
              "10   2119            student   \n",
              "\n",
              "                                                 text  \\\n",
              "0   friends, yesterday we started off by working o...   \n",
              "1                                                yes.   \n",
              "2   and yesterday towards the end of the period, y...   \n",
              "3                                                yes.   \n",
              "4   some of you might be done. if you are finished...   \n",
              "5               can we find new ways to check it or ?   \n",
              "6   well, the best way to check it is going to be ...   \n",
              "7           can you  the gallon? i don't know how to.   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "10  i can make it like that. that's the way it fil...   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "0   friends yesterday we started off by working on...   \n",
              "1                                                 yes   \n",
              "2   and yesterday towards the end of the period yo...   \n",
              "3                                                 yes   \n",
              "4   some of you might be done if you are finished ...   \n",
              "5                can we find new ways to check it or    \n",
              "6   well the best way to check it is going to be t...   \n",
              "7              can you  the gallon i dont know how to   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "10  i can make it like that thats the way it fills...   \n",
              "\n",
              "                                        content_words  alltext_similar_score  \n",
              "0   friends yesterday started working word problem...               0.202136  \n",
              "1                                                 yes               0.174523  \n",
              "2   yesterday towards end period got word problem ...               0.174523  \n",
              "3                                                 yes               0.325689  \n",
              "4   might done finished look make sure happy way d...               0.874164  \n",
              "5                                 find new ways check               0.799396  \n",
              "6   well best way check going draw picture math pa...               0.694140  \n",
              "7                                    gallon dont know               0.738913  \n",
              "9   guess draw basically remember yesterday showed...               0.908409  \n",
              "10                      make like thats way fills gas               0.703221  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b0f61bea-e77d-4062-83f1-cfd15b3725c8\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "      <th>alltext_similar_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "      <td>friends yesterday we started off by working on...</td>\n",
              "      <td>friends yesterday started working word problem...</td>\n",
              "      <td>0.202136</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.174523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "      <td>and yesterday towards the end of the period yo...</td>\n",
              "      <td>yesterday towards end period got word problem ...</td>\n",
              "      <td>0.174523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.325689</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "      <td>some of you might be done if you are finished ...</td>\n",
              "      <td>might done finished look make sure happy way d...</td>\n",
              "      <td>0.874164</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "      <td>can we find new ways to check it or</td>\n",
              "      <td>find new ways check</td>\n",
              "      <td>0.799396</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "      <td>well the best way to check it is going to be t...</td>\n",
              "      <td>well best way check going draw picture math pa...</td>\n",
              "      <td>0.694140</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "      <td>can you  the gallon i dont know how to</td>\n",
              "      <td>gallon dont know</td>\n",
              "      <td>0.738913</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>guess draw basically remember yesterday showed...</td>\n",
              "      <td>0.908409</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "      <td>i can make it like that thats the way it fills...</td>\n",
              "      <td>make like thats way fills gas</td>\n",
              "      <td>0.703221</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b0f61bea-e77d-4062-83f1-cfd15b3725c8')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b0f61bea-e77d-4062-83f1-cfd15b3725c8 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b0f61bea-e77d-4062-83f1-cfd15b3725c8');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-f148abad-0978-44f0-b678-acf393b2c050\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-f148abad-0978-44f0-b678-acf393b2c050')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-f148abad-0978-44f0-b678-acf393b2c050 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 28
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**For content words only**"
      ],
      "metadata": {
        "id": "XZA8YFq5-S6Q"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Process the texts using nlp.pipe for efficiency\n",
        "ncte_data_docs = list(nlp.pipe(ncte_utterances_final['content_words']))\n",
        "\n",
        "doc_similarity = []  # Holder list for spacy docs semantic similarity\n",
        "\n",
        "# No need to iterate over ncte_data_docs just to copy them to another list\n",
        "\n",
        "# Calculate semantic similarity between consecutive documents\n",
        "for i in range(len(ncte_data_docs) - 1):  # Iterate through the range of documents\n",
        "    j = i + 1  # Compare with the next document to the previous one\n",
        "\n",
        "    # Check if either of the documents is empty (no text because the original document was empty or got removed in cleaning)\n",
        "    if ncte_data_docs[i].text == '' or ncte_data_docs[j].text == '':\n",
        "        similarity_score = 0  # Any time there is no text in one row to compare to the other, give it a semantic similarity score of 0\n",
        "    elif ncte_data_docs[i].has_vector and ncte_data_docs[j].has_vector:\n",
        "        similarity_score = ncte_data_docs[i].similarity(ncte_data_docs[j])  # Compare sentences and assign them a value similarity score\n",
        "    else:\n",
        "        similarity_score = 0  # This takes care of empty vectors\n",
        "\n",
        "    doc_similarity.append(similarity_score)"
      ],
      "metadata": {
        "id": "zeOGTVwW-Shm"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Append a similarity score of 0 for the last document\n",
        "doc_similarity.append(0)\n",
        "\n",
        "# Add the 'similar_score' column in the Pandas dataframe that contains the semantic similarity scores calculated for each comparison\n",
        "ncte_utterances_final['content_words_similarity'] = doc_similarity"
      ],
      "metadata": {
        "id": "wMnFDozX-c-q"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_utterances_final.head(10) #double checking dataframe contains scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "ZN5LFl6NA17q",
        "outputId": "83d56e96-b13e-48f1-cb7a-22c13d4021de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "0    2119            teacher   \n",
              "1    2119            student   \n",
              "2    2119            teacher   \n",
              "3    2119  multiple students   \n",
              "4    2119            teacher   \n",
              "5    2119            student   \n",
              "6    2119            teacher   \n",
              "7    2119            student   \n",
              "9    2119            teacher   \n",
              "10   2119            student   \n",
              "\n",
              "                                                 text  \\\n",
              "0   friends, yesterday we started off by working o...   \n",
              "1                                                yes.   \n",
              "2   and yesterday towards the end of the period, y...   \n",
              "3                                                yes.   \n",
              "4   some of you might be done. if you are finished...   \n",
              "5               can we find new ways to check it or ?   \n",
              "6   well, the best way to check it is going to be ...   \n",
              "7           can you  the gallon? i don't know how to.   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "10  i can make it like that. that's the way it fil...   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "0   friends yesterday we started off by working on...   \n",
              "1                                                 yes   \n",
              "2   and yesterday towards the end of the period yo...   \n",
              "3                                                 yes   \n",
              "4   some of you might be done if you are finished ...   \n",
              "5                can we find new ways to check it or    \n",
              "6   well the best way to check it is going to be t...   \n",
              "7              can you  the gallon i dont know how to   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "10  i can make it like that thats the way it fills...   \n",
              "\n",
              "                                        content_words  alltext_similar_score  \\\n",
              "0   friends yesterday started working word problem...               0.202136   \n",
              "1                                                 yes               0.174523   \n",
              "2   yesterday towards end period got word problem ...               0.174523   \n",
              "3                                                 yes               0.325689   \n",
              "4   might done finished look make sure happy way d...               0.874164   \n",
              "5                                 find new ways check               0.799396   \n",
              "6   well best way check going draw picture math pa...               0.694140   \n",
              "7                                    gallon dont know               0.738913   \n",
              "9   guess draw basically remember yesterday showed...               0.908409   \n",
              "10                      make like thats way fills gas               0.703221   \n",
              "\n",
              "    content_words_similarity  \n",
              "0                   0.353991  \n",
              "1                   0.306709  \n",
              "2                   0.306709  \n",
              "3                   0.271062  \n",
              "4                   0.551279  \n",
              "5                   0.634771  \n",
              "6                   0.388099  \n",
              "7                   0.417189  \n",
              "9                   0.783841  \n",
              "10                  0.383611  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-eca7cd17-4b15-41a7-831e-d33188117129\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "      <th>alltext_similar_score</th>\n",
              "      <th>content_words_similarity</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "      <td>friends yesterday we started off by working on...</td>\n",
              "      <td>friends yesterday started working word problem...</td>\n",
              "      <td>0.202136</td>\n",
              "      <td>0.353991</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.174523</td>\n",
              "      <td>0.306709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "      <td>and yesterday towards the end of the period yo...</td>\n",
              "      <td>yesterday towards end period got word problem ...</td>\n",
              "      <td>0.174523</td>\n",
              "      <td>0.306709</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.325689</td>\n",
              "      <td>0.271062</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "      <td>some of you might be done if you are finished ...</td>\n",
              "      <td>might done finished look make sure happy way d...</td>\n",
              "      <td>0.874164</td>\n",
              "      <td>0.551279</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "      <td>can we find new ways to check it or</td>\n",
              "      <td>find new ways check</td>\n",
              "      <td>0.799396</td>\n",
              "      <td>0.634771</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "      <td>well the best way to check it is going to be t...</td>\n",
              "      <td>well best way check going draw picture math pa...</td>\n",
              "      <td>0.694140</td>\n",
              "      <td>0.388099</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "      <td>can you  the gallon i dont know how to</td>\n",
              "      <td>gallon dont know</td>\n",
              "      <td>0.738913</td>\n",
              "      <td>0.417189</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>guess draw basically remember yesterday showed...</td>\n",
              "      <td>0.908409</td>\n",
              "      <td>0.783841</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "      <td>i can make it like that thats the way it fills...</td>\n",
              "      <td>make like thats way fills gas</td>\n",
              "      <td>0.703221</td>\n",
              "      <td>0.383611</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-eca7cd17-4b15-41a7-831e-d33188117129')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-eca7cd17-4b15-41a7-831e-d33188117129 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-eca7cd17-4b15-41a7-831e-d33188117129');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aae47b41-69dd-45ac-8afd-feaebf3ddee3\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aae47b41-69dd-45ac-8afd-feaebf3ddee3')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aae47b41-69dd-45ac-8afd-feaebf3ddee3 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 31
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Save teacher & student utterances dataframe for analysis in R**"
      ],
      "metadata": {
        "id": "FRVhX0tHGBpj"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_utterances_final.to_csv('ncte_utterances_final_semanticsimilarity.csv')"
      ],
      "metadata": {
        "id": "lHE8MPUEA7Tg"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "### 6. Semantic Similairty for Teacher Utterances (only)"
      ],
      "metadata": {
        "id": "i4JFHMIH1KfB"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Filter out student utterances, keep teacher utterances**"
      ],
      "metadata": {
        "id": "uOhXI7nuC8Ln"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Filter out the student rows to keep only teacher utterances\n",
        "ncte_teacher_utterances = ncte_utterances_final[ncte_utterances_final['speaker'] == 'teacher']\n",
        "\n",
        "# Keep specific columns and remove others\n",
        "columns_to_keep = ['OBSID', 'speaker', 'text', 'text_no_punctuation', 'content_words']\n",
        "ncte_teacher_utterances = ncte_teacher_utterances.loc[:, columns_to_keep]"
      ],
      "metadata": {
        "id": "4d3VCsRq1KMr"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the modified DataFrame\n",
        "ncte_teacher_utterances.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "METslEdUBOfO",
        "outputId": "ed130640-9f9a-4926-823a-c47123be8eec"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID  speaker                                               text  \\\n",
              "0    2119  teacher  friends, yesterday we started off by working o...   \n",
              "2    2119  teacher  and yesterday towards the end of the period, y...   \n",
              "4    2119  teacher  some of you might be done. if you are finished...   \n",
              "6    2119  teacher  well, the best way to check it is going to be ...   \n",
              "9    2119  teacher  i guess draw it basically remember yesterday w...   \n",
              "11   2119  teacher     that works. so now show three fourths of that.   \n",
              "13   2119  teacher  you might wanna draw it a little bit bigger. l...   \n",
              "15   2119  teacher  do the same thing with what you're doing there...   \n",
              "17   2119  teacher  that's what you have going on? because student...   \n",
              "19   2119  teacher                                     so four, five.   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "0   friends yesterday we started off by working on...   \n",
              "2   and yesterday towards the end of the period yo...   \n",
              "4   some of you might be done if you are finished ...   \n",
              "6   well the best way to check it is going to be t...   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "11       that works so now show three fourths of that   \n",
              "13  you might wanna draw it a little bit bigger li...   \n",
              "15  do the same thing with what youre doing there ...   \n",
              "17  thats what you have going on because student h...   \n",
              "19                                       so four five   \n",
              "\n",
              "                                        content_words  \n",
              "0   friends yesterday started working word problem...  \n",
              "2   yesterday towards end period got word problem ...  \n",
              "4   might done finished look make sure happy way d...  \n",
              "6   well best way check going draw picture math pa...  \n",
              "9   guess draw basically remember yesterday showed...  \n",
              "11                           works show three fourths  \n",
              "13  might wanna draw little bit bigger like wanna ...  \n",
              "15  thing youre gallon gas im talking case draw pi...  \n",
              "17                 thats going student h using pencil  \n",
              "19                                          four five  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3d1329fe-4b35-4162-8213-eb87ff8a4943\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "      <td>friends yesterday we started off by working on...</td>\n",
              "      <td>friends yesterday started working word problem...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "      <td>and yesterday towards the end of the period yo...</td>\n",
              "      <td>yesterday towards end period got word problem ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "      <td>some of you might be done if you are finished ...</td>\n",
              "      <td>might done finished look make sure happy way d...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "      <td>well the best way to check it is going to be t...</td>\n",
              "      <td>well best way check going draw picture math pa...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>guess draw basically remember yesterday showed...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>that works. so now show three fourths of that.</td>\n",
              "      <td>that works so now show three fourths of that</td>\n",
              "      <td>works show three fourths</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>you might wanna draw it a little bit bigger. l...</td>\n",
              "      <td>you might wanna draw it a little bit bigger li...</td>\n",
              "      <td>might wanna draw little bit bigger like wanna ...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>do the same thing with what you're doing there...</td>\n",
              "      <td>do the same thing with what youre doing there ...</td>\n",
              "      <td>thing youre gallon gas im talking case draw pi...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>that's what you have going on? because student...</td>\n",
              "      <td>thats what you have going on because student h...</td>\n",
              "      <td>thats going student h using pencil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>so four, five.</td>\n",
              "      <td>so four five</td>\n",
              "      <td>four five</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3d1329fe-4b35-4162-8213-eb87ff8a4943')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-3d1329fe-4b35-4162-8213-eb87ff8a4943 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-3d1329fe-4b35-4162-8213-eb87ff8a4943');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-e60ff514-6392-4eaf-aa64-464b31b10ad9\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-e60ff514-6392-4eaf-aa64-464b31b10ad9')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-e60ff514-6392-4eaf-aa64-464b31b10ad9 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "#get dimensions\n",
        "ncte_teacher_utterances.shape\n",
        "\n",
        "#about half of the rows were from teacher talk"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "MzgOCQ_tBgUl",
        "outputId": "ae1dafe9-d58d-4fde-ebf6-4ff80d8d9228"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(207427, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**For all words (text_no_punctuation)**"
      ],
      "metadata": {
        "id": "Jt47UrN4C21l"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Process the texts using nlp.pipe for efficiency\n",
        "ncte_teacher_docs = list(nlp.pipe(ncte_teacher_utterances['text_no_punctuation']))\n",
        "\n",
        "doc_similarity_3 = []  # Holder list for spacy docs semantic similarity\n",
        "\n",
        "# Calculate semantic similarity between consecutive documents\n",
        "for i in range(len(ncte_teacher_docs) - 1):  # Iterate through the range of documents\n",
        "    j = i + 1  # Compare with the next document to the previous one\n",
        "\n",
        "    # Check if either of the documents is empty (no text because the original document was empty or got removed in cleaning)\n",
        "    if ncte_teacher_docs[i].text == '' or ncte_teacher_docs[j].text == '':\n",
        "        similarity_score = 0  # Any time there is no text in one row to compare to the other, give it a semantic similarity score of 0\n",
        "    elif ncte_teacher_docs[i].has_vector and ncte_teacher_docs[j].has_vector:\n",
        "        similarity_score = ncte_teacher_docs[i].similarity(ncte_teacher_docs[j])  # Compare sentences and assign them a value similarity score\n",
        "    else:\n",
        "        similarity_score = 0  # This takes care of empty vectors\n",
        "\n",
        "    doc_similarity_3.append(similarity_score)\n"
      ],
      "metadata": {
        "id": "v_rdrhNeL_IY"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "R1d763bYGXGv"
      },
      "source": [
        "Add all text similarity score to ncte_teacher dataframe"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "y5bHBiDKx7Yj"
      },
      "outputs": [],
      "source": [
        "# Append a similarity score of 0 for the last document\n",
        "doc_similarity_3.append(0)\n",
        "\n",
        "# Add the 'similar_score' column in the Pandas dataframe that contains the semantic similarity scores calculated for each comparison\n",
        "ncte_teacher_utterances['alltext_similar_score'] = doc_similarity_3"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 502
        },
        "id": "tXZPNfZbyPys",
        "outputId": "f92ecdac-bbd4-485f-d549-b5446ea18097"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID  speaker                                               text  \\\n",
              "0    2119  teacher  friends, yesterday we started off by working o...   \n",
              "2    2119  teacher  and yesterday towards the end of the period, y...   \n",
              "4    2119  teacher  some of you might be done. if you are finished...   \n",
              "6    2119  teacher  well, the best way to check it is going to be ...   \n",
              "9    2119  teacher  i guess draw it basically remember yesterday w...   \n",
              "11   2119  teacher     that works. so now show three fourths of that.   \n",
              "13   2119  teacher  you might wanna draw it a little bit bigger. l...   \n",
              "15   2119  teacher  do the same thing with what you're doing there...   \n",
              "17   2119  teacher  that's what you have going on? because student...   \n",
              "19   2119  teacher                                     so four, five.   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "0   friends yesterday we started off by working on...   \n",
              "2   and yesterday towards the end of the period yo...   \n",
              "4   some of you might be done if you are finished ...   \n",
              "6   well the best way to check it is going to be t...   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "11       that works so now show three fourths of that   \n",
              "13  you might wanna draw it a little bit bigger li...   \n",
              "15  do the same thing with what youre doing there ...   \n",
              "17  thats what you have going on because student h...   \n",
              "19                                       so four five   \n",
              "\n",
              "                                        content_words  alltext_similar_score  \n",
              "0   friends yesterday started working word problem...               0.749705  \n",
              "2   yesterday towards end period got word problem ...               0.869290  \n",
              "4   might done finished look make sure happy way d...               0.884623  \n",
              "6   well best way check going draw picture math pa...               0.953867  \n",
              "9   guess draw basically remember yesterday showed...               0.805809  \n",
              "11                           works show three fourths               0.806185  \n",
              "13  might wanna draw little bit bigger like wanna ...               0.907149  \n",
              "15  thing youre gallon gas im talking case draw pi...               0.857993  \n",
              "17                 thats going student h using pencil               0.388658  \n",
              "19                                          four five               0.415478  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-e0d12d87-7b81-4d7d-9027-e2ba002d1d67\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "      <th>alltext_similar_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "      <td>friends yesterday we started off by working on...</td>\n",
              "      <td>friends yesterday started working word problem...</td>\n",
              "      <td>0.749705</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "      <td>and yesterday towards the end of the period yo...</td>\n",
              "      <td>yesterday towards end period got word problem ...</td>\n",
              "      <td>0.869290</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "      <td>some of you might be done if you are finished ...</td>\n",
              "      <td>might done finished look make sure happy way d...</td>\n",
              "      <td>0.884623</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "      <td>well the best way to check it is going to be t...</td>\n",
              "      <td>well best way check going draw picture math pa...</td>\n",
              "      <td>0.953867</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>guess draw basically remember yesterday showed...</td>\n",
              "      <td>0.805809</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>that works. so now show three fourths of that.</td>\n",
              "      <td>that works so now show three fourths of that</td>\n",
              "      <td>works show three fourths</td>\n",
              "      <td>0.806185</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>you might wanna draw it a little bit bigger. l...</td>\n",
              "      <td>you might wanna draw it a little bit bigger li...</td>\n",
              "      <td>might wanna draw little bit bigger like wanna ...</td>\n",
              "      <td>0.907149</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>do the same thing with what you're doing there...</td>\n",
              "      <td>do the same thing with what youre doing there ...</td>\n",
              "      <td>thing youre gallon gas im talking case draw pi...</td>\n",
              "      <td>0.857993</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>that's what you have going on? because student...</td>\n",
              "      <td>thats what you have going on because student h...</td>\n",
              "      <td>thats going student h using pencil</td>\n",
              "      <td>0.388658</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>so four, five.</td>\n",
              "      <td>so four five</td>\n",
              "      <td>four five</td>\n",
              "      <td>0.415478</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-e0d12d87-7b81-4d7d-9027-e2ba002d1d67')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-e0d12d87-7b81-4d7d-9027-e2ba002d1d67 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-e0d12d87-7b81-4d7d-9027-e2ba002d1d67');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-b892ec48-34f0-4af5-a30a-d98049869ed2\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-b892ec48-34f0-4af5-a30a-d98049869ed2')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-b892ec48-34f0-4af5-a30a-d98049869ed2 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ],
      "source": [
        "ncte_teacher_utterances.head(10) #double checking dataframe contains scores"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "VY0Xdny-ebHq"
      },
      "source": [
        "**For content words only**"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "Djjry9Uc1GEC"
      },
      "outputs": [],
      "source": [
        "# Process the texts using nlp.pipe for efficiency\n",
        "ncte_teacher_docs = list(nlp.pipe(ncte_teacher_utterances['content_words']))\n",
        "\n",
        "doc_similarity_4 = []  # Holder list for spacy docs semantic similarity\n",
        "\n",
        "# Calculate semantic similarity between consecutive documents\n",
        "for i in range(len(ncte_teacher_docs) - 1):  # Iterate through the range of documents\n",
        "    j = i + 1  # Compare with the next document to the previous one\n",
        "\n",
        "    # Check if either of the documents is empty (no text because the original document was empty or got removed in cleaning)\n",
        "    if ncte_teacher_docs[i].text == '' or ncte_teacher_docs[j].text == '':\n",
        "        similarity_score = 0  # Any time there is no text in one row to compare to the other, give it a semantic similarity score of 0\n",
        "    elif ncte_teacher_docs[i].has_vector and ncte_teacher_docs[j].has_vector:\n",
        "        similarity_score = ncte_teacher_docs[i].similarity(ncte_teacher_docs[j])  # Compare sentences and assign them a value similarity score\n",
        "    else:\n",
        "        similarity_score = 0  # This takes care of empty vectors\n",
        "\n",
        "    doc_similarity_4.append(similarity_score)\n"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Fw2mwUElvSwh"
      },
      "source": [
        "Add the content word similarity score to ncte_teacher dataframe"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "kap0Axjsu2bs"
      },
      "outputs": [],
      "source": [
        "# Append a similarity score of 0 for the last document\n",
        "doc_similarity_4.append(0)\n",
        "\n",
        "# Add the 'similar_score' column in the Pandas dataframe that contains the semantic similarity scores calculated for each comparison\n",
        "ncte_teacher_utterances['cw_similar_score'] = doc_similarity_4"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 519
        },
        "id": "FdZV7vdku9fo",
        "outputId": "6968f28f-606e-4f37-eaaa-378f6d63c8ac"
      },
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID  speaker                                               text  \\\n",
              "0    2119  teacher  friends, yesterday we started off by working o...   \n",
              "2    2119  teacher  and yesterday towards the end of the period, y...   \n",
              "4    2119  teacher  some of you might be done. if you are finished...   \n",
              "6    2119  teacher  well, the best way to check it is going to be ...   \n",
              "9    2119  teacher  i guess draw it basically remember yesterday w...   \n",
              "11   2119  teacher     that works. so now show three fourths of that.   \n",
              "13   2119  teacher  you might wanna draw it a little bit bigger. l...   \n",
              "15   2119  teacher  do the same thing with what you're doing there...   \n",
              "17   2119  teacher  that's what you have going on? because student...   \n",
              "19   2119  teacher                                     so four, five.   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "0   friends yesterday we started off by working on...   \n",
              "2   and yesterday towards the end of the period yo...   \n",
              "4   some of you might be done if you are finished ...   \n",
              "6   well the best way to check it is going to be t...   \n",
              "9   i guess draw it basically remember yesterday w...   \n",
              "11       that works so now show three fourths of that   \n",
              "13  you might wanna draw it a little bit bigger li...   \n",
              "15  do the same thing with what youre doing there ...   \n",
              "17  thats what you have going on because student h...   \n",
              "19                                       so four five   \n",
              "\n",
              "                                        content_words  alltext_similar_score  \\\n",
              "0   friends yesterday started working word problem...               0.749705   \n",
              "2   yesterday towards end period got word problem ...               0.869290   \n",
              "4   might done finished look make sure happy way d...               0.884623   \n",
              "6   well best way check going draw picture math pa...               0.953867   \n",
              "9   guess draw basically remember yesterday showed...               0.805809   \n",
              "11                           works show three fourths               0.806185   \n",
              "13  might wanna draw little bit bigger like wanna ...               0.907149   \n",
              "15  thing youre gallon gas im talking case draw pi...               0.857993   \n",
              "17                 thats going student h using pencil               0.388658   \n",
              "19                                          four five               0.415478   \n",
              "\n",
              "    cw_similar_score  \n",
              "0           0.766437  \n",
              "2           0.653268  \n",
              "4           0.758269  \n",
              "6           0.858346  \n",
              "9           0.517561  \n",
              "11          0.740201  \n",
              "13          0.756144  \n",
              "15          0.677561  \n",
              "17          0.067523  \n",
              "19          0.024155  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-69afa187-6f09-480b-93cc-17a7da10ce92\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "      <th>alltext_similar_score</th>\n",
              "      <th>cw_similar_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>friends, yesterday we started off by working o...</td>\n",
              "      <td>friends yesterday we started off by working on...</td>\n",
              "      <td>friends yesterday started working word problem...</td>\n",
              "      <td>0.749705</td>\n",
              "      <td>0.766437</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>and yesterday towards the end of the period, y...</td>\n",
              "      <td>and yesterday towards the end of the period yo...</td>\n",
              "      <td>yesterday towards end period got word problem ...</td>\n",
              "      <td>0.869290</td>\n",
              "      <td>0.653268</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>some of you might be done. if you are finished...</td>\n",
              "      <td>some of you might be done if you are finished ...</td>\n",
              "      <td>might done finished look make sure happy way d...</td>\n",
              "      <td>0.884623</td>\n",
              "      <td>0.758269</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>well, the best way to check it is going to be ...</td>\n",
              "      <td>well the best way to check it is going to be t...</td>\n",
              "      <td>well best way check going draw picture math pa...</td>\n",
              "      <td>0.953867</td>\n",
              "      <td>0.858346</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>i guess draw it basically remember yesterday w...</td>\n",
              "      <td>guess draw basically remember yesterday showed...</td>\n",
              "      <td>0.805809</td>\n",
              "      <td>0.517561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>11</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>that works. so now show three fourths of that.</td>\n",
              "      <td>that works so now show three fourths of that</td>\n",
              "      <td>works show three fourths</td>\n",
              "      <td>0.806185</td>\n",
              "      <td>0.740201</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>13</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>you might wanna draw it a little bit bigger. l...</td>\n",
              "      <td>you might wanna draw it a little bit bigger li...</td>\n",
              "      <td>might wanna draw little bit bigger like wanna ...</td>\n",
              "      <td>0.907149</td>\n",
              "      <td>0.756144</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>15</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>do the same thing with what you're doing there...</td>\n",
              "      <td>do the same thing with what youre doing there ...</td>\n",
              "      <td>thing youre gallon gas im talking case draw pi...</td>\n",
              "      <td>0.857993</td>\n",
              "      <td>0.677561</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>17</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>that's what you have going on? because student...</td>\n",
              "      <td>thats what you have going on because student h...</td>\n",
              "      <td>thats going student h using pencil</td>\n",
              "      <td>0.388658</td>\n",
              "      <td>0.067523</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>19</th>\n",
              "      <td>2119</td>\n",
              "      <td>teacher</td>\n",
              "      <td>so four, five.</td>\n",
              "      <td>so four five</td>\n",
              "      <td>four five</td>\n",
              "      <td>0.415478</td>\n",
              "      <td>0.024155</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-69afa187-6f09-480b-93cc-17a7da10ce92')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-69afa187-6f09-480b-93cc-17a7da10ce92 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-69afa187-6f09-480b-93cc-17a7da10ce92');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9a72cf11-5f96-4e49-83d2-9bafe29ce188\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9a72cf11-5f96-4e49-83d2-9bafe29ce188')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9a72cf11-5f96-4e49-83d2-9bafe29ce188 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ],
      "source": [
        "ncte_teacher_utterances.head(10) #double checking dataframe contains scores"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Save ncte_teacher dataframe for analysis in R**"
      ],
      "metadata": {
        "id": "xhi4AVgRF50x"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "71d-TIRxvH3a"
      },
      "outputs": [],
      "source": [
        "ncte_teacher_utterances.to_csv('ncte_teacher_similarityscores_2.csv')"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "z3oP4XSr0kta"
      },
      "source": [
        "### 6. Semantic Similairty for Student Utterances (only)"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Filter out teacher utterances, keep student utterances**"
      ],
      "metadata": {
        "id": "1uCZfwhLEXSc"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_student_utterances = ncte_utterances_final[ncte_utterances_final['speaker'].isin(['student', 'multiple students'])]"
      ],
      "metadata": {
        "id": "OYdlNZr5Eha7"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "# Print the modified DataFrame\n",
        "ncte_student_utterances.head(10)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "Ny2fwGBSEvEa",
        "outputId": "c8081232-5578-425f-bdd7-44707a76f9ea"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "1    2119            student   \n",
              "3    2119  multiple students   \n",
              "5    2119            student   \n",
              "7    2119            student   \n",
              "10   2119            student   \n",
              "12   2119            student   \n",
              "14   2119            student   \n",
              "16   2119            student   \n",
              "18   2119            student   \n",
              "20   2119            student   \n",
              "\n",
              "                                                 text  \\\n",
              "1                                                yes.   \n",
              "3                                                yes.   \n",
              "5               can we find new ways to check it or ?   \n",
              "7           can you  the gallon? i don't know how to.   \n",
              "10  i can make it like that. that's the way it fil...   \n",
              "12                                       i'm pretty .   \n",
              "14                                            mm-hmm.   \n",
              "16                              he's using my pencil.   \n",
              "18                                              yeah.   \n",
              "20                                         at first .   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "1                                                 yes   \n",
              "3                                                 yes   \n",
              "5                can we find new ways to check it or    \n",
              "7              can you  the gallon i dont know how to   \n",
              "10  i can make it like that thats the way it fills...   \n",
              "12                                         im pretty    \n",
              "14                                              mmhmm   \n",
              "16                                hes using my pencil   \n",
              "18                                               yeah   \n",
              "20                                          at first    \n",
              "\n",
              "                    content_words  \n",
              "1                             yes  \n",
              "3                             yes  \n",
              "5             find new ways check  \n",
              "7                gallon dont know  \n",
              "10  make like thats way fills gas  \n",
              "12                      im pretty  \n",
              "14                          mmhmm  \n",
              "16               hes using pencil  \n",
              "18                           yeah  \n",
              "20                          first  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-b641ce7c-a5a2-4f68-bc4f-688711a69fd7\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "      <td>can we find new ways to check it or</td>\n",
              "      <td>find new ways check</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "      <td>can you  the gallon i dont know how to</td>\n",
              "      <td>gallon dont know</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "      <td>i can make it like that thats the way it fills...</td>\n",
              "      <td>make like thats way fills gas</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i'm pretty .</td>\n",
              "      <td>im pretty</td>\n",
              "      <td>im pretty</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>mm-hmm.</td>\n",
              "      <td>mmhmm</td>\n",
              "      <td>mmhmm</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>he's using my pencil.</td>\n",
              "      <td>hes using my pencil</td>\n",
              "      <td>hes using pencil</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yeah.</td>\n",
              "      <td>yeah</td>\n",
              "      <td>yeah</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>at first .</td>\n",
              "      <td>at first</td>\n",
              "      <td>first</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b641ce7c-a5a2-4f68-bc4f-688711a69fd7')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-b641ce7c-a5a2-4f68-bc4f-688711a69fd7 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-b641ce7c-a5a2-4f68-bc4f-688711a69fd7');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-9c54d974-900e-4758-b18f-99be54aa2a20\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9c54d974-900e-4758-b18f-99be54aa2a20')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-9c54d974-900e-4758-b18f-99be54aa2a20 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 26
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_student_utterances.shape"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "zh1fNfPeE48M",
        "outputId": "82b3db75-88ce-43bc-ab4a-9acd662886cf"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "(175687, 5)"
            ]
          },
          "metadata": {},
          "execution_count": 27
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**For all words (text_no_punctuation)**"
      ],
      "metadata": {
        "id": "cpbtmdtHFSFb"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Process the texts using nlp.pipe for efficiency\n",
        "ncte_student_docs = list(nlp.pipe(ncte_student_utterances['text_no_punctuation']))\n",
        "\n",
        "doc_similarity_5 = []  # Holder list for spacy docs semantic similarity\n",
        "\n",
        "# Calculate semantic similarity between consecutive documents\n",
        "for i in range(len(ncte_student_docs) - 1):  # Iterate through the range of documents\n",
        "    j = i + 1  # Compare with the next document to the previous one\n",
        "\n",
        "    # Check if either of the documents is empty (no text because the original document was empty or got removed in cleaning)\n",
        "    if ncte_student_docs[i].text == '' or ncte_student_docs[j].text == '':\n",
        "        similarity_score = 0  # Any time there is no text in one row to compare to the other, give it a semantic similarity score of 0\n",
        "    elif ncte_student_docs[i].has_vector and ncte_student_docs[j].has_vector:\n",
        "        similarity_score = ncte_student_docs[i].similarity(ncte_student_docs[j])  # Compare sentences and assign them a value similarity score\n",
        "    else:\n",
        "        similarity_score = 0  # This takes care of empty vectors\n",
        "\n",
        "    doc_similarity_5.append(similarity_score)"
      ],
      "metadata": {
        "id": "p0--monrFZ5H"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Add all text similarity score to ncte_student dataframe"
      ],
      "metadata": {
        "id": "fB3UhjbCFqZT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Append a similarity score of 0 for the last document\n",
        "doc_similarity_5.append(0)\n",
        "\n",
        "# Add the 'similar_score' column in the Pandas dataframe that contains the semantic similarity scores calculated for each comparison\n",
        "ncte_student_utterances['alltext_similar_score'] = doc_similarity_5"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lIKJe5a0Fr1N",
        "outputId": "a34f4e3c-b00b-49ce-ba7d-d35c27912b55"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-29-45598c60a6f5>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  ncte_student_utterances['alltext_similar_score'] = doc_similarity_5\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_student_utterances.head(10) #double checking dataframe contains scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 363
        },
        "id": "eH2c4uMGIQnz",
        "outputId": "a8aba867-f4f3-4caf-c16a-622e5e67182f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "1    2119            student   \n",
              "3    2119  multiple students   \n",
              "5    2119            student   \n",
              "7    2119            student   \n",
              "10   2119            student   \n",
              "12   2119            student   \n",
              "14   2119            student   \n",
              "16   2119            student   \n",
              "18   2119            student   \n",
              "20   2119            student   \n",
              "\n",
              "                                                 text  \\\n",
              "1                                                yes.   \n",
              "3                                                yes.   \n",
              "5               can we find new ways to check it or ?   \n",
              "7           can you  the gallon? i don't know how to.   \n",
              "10  i can make it like that. that's the way it fil...   \n",
              "12                                       i'm pretty .   \n",
              "14                                            mm-hmm.   \n",
              "16                              he's using my pencil.   \n",
              "18                                              yeah.   \n",
              "20                                         at first .   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "1                                                 yes   \n",
              "3                                                 yes   \n",
              "5                can we find new ways to check it or    \n",
              "7              can you  the gallon i dont know how to   \n",
              "10  i can make it like that thats the way it fills...   \n",
              "12                                         im pretty    \n",
              "14                                              mmhmm   \n",
              "16                                hes using my pencil   \n",
              "18                                               yeah   \n",
              "20                                          at first    \n",
              "\n",
              "                    content_words  alltext_similar_score  \n",
              "1                             yes               1.000000  \n",
              "3                             yes               0.250270  \n",
              "5             find new ways check               0.823414  \n",
              "7                gallon dont know               0.763146  \n",
              "10  make like thats way fills gas               0.335010  \n",
              "12                      im pretty               0.000000  \n",
              "14                          mmhmm               0.000000  \n",
              "16               hes using pencil               0.270560  \n",
              "18                           yeah              -0.109455  \n",
              "20                          first               0.160633  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-492dd684-e35d-417c-98d8-eb6d46fb848d\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "      <th>alltext_similar_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.250270</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "      <td>can we find new ways to check it or</td>\n",
              "      <td>find new ways check</td>\n",
              "      <td>0.823414</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "      <td>can you  the gallon i dont know how to</td>\n",
              "      <td>gallon dont know</td>\n",
              "      <td>0.763146</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "      <td>i can make it like that thats the way it fills...</td>\n",
              "      <td>make like thats way fills gas</td>\n",
              "      <td>0.335010</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i'm pretty .</td>\n",
              "      <td>im pretty</td>\n",
              "      <td>im pretty</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>mm-hmm.</td>\n",
              "      <td>mmhmm</td>\n",
              "      <td>mmhmm</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>he's using my pencil.</td>\n",
              "      <td>hes using my pencil</td>\n",
              "      <td>hes using pencil</td>\n",
              "      <td>0.270560</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yeah.</td>\n",
              "      <td>yeah</td>\n",
              "      <td>yeah</td>\n",
              "      <td>-0.109455</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>at first .</td>\n",
              "      <td>at first</td>\n",
              "      <td>first</td>\n",
              "      <td>0.160633</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-492dd684-e35d-417c-98d8-eb6d46fb848d')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-492dd684-e35d-417c-98d8-eb6d46fb848d button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-492dd684-e35d-417c-98d8-eb6d46fb848d');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-aacea3a9-161d-4114-b624-c80290f6e25a\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-aacea3a9-161d-4114-b624-c80290f6e25a')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-aacea3a9-161d-4114-b624-c80290f6e25a button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 30
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**For content words**"
      ],
      "metadata": {
        "id": "DUsUjAYsFalD"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Process the texts using nlp.pipe for efficiency\n",
        "ncte_student_docs = list(nlp.pipe(ncte_student_utterances['content_words']))\n",
        "\n",
        "doc_similarity_6 = []  # Holder list for spacy docs semantic similarity\n",
        "\n",
        "# Calculate semantic similarity between consecutive documents\n",
        "for i in range(len(ncte_student_docs) - 1):  # Iterate through the range of documents\n",
        "    j = i + 1  # Compare with the next document to the previous one\n",
        "\n",
        "    # Check if either of the documents is empty (no text because the original document was empty or got removed in cleaning)\n",
        "    if ncte_student_docs[i].text == '' or ncte_student_docs[j].text == '':\n",
        "        similarity_score = 0  # Any time there is no text in one row to compare to the other, give it a semantic similarity score of 0\n",
        "    elif ncte_student_docs[i].has_vector and ncte_student_docs[j].has_vector:\n",
        "        similarity_score = ncte_student_docs[i].similarity(ncte_student_docs[j])  # Compare sentences and assign them a value similarity score\n",
        "    else:\n",
        "        similarity_score = 0  # This takes care of empty vectors\n",
        "\n",
        "    doc_similarity_6.append(similarity_score)"
      ],
      "metadata": {
        "id": "FuY-PVg6Fbk1"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "markdown",
      "source": [
        "Add content words similarity score to ncte_student dataframe"
      ],
      "metadata": {
        "id": "t3tnqqw_FxZe"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Append a similarity score of 0 for the last document\n",
        "doc_similarity_6.append(0)\n",
        "\n",
        "# Add the 'similar_score' column in the Pandas dataframe that contains the semantic similarity scores calculated for each comparison\n",
        "ncte_student_utterances['cw_similar_score'] = doc_similarity_6"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "vXvGS_pVF1wI",
        "outputId": "b8447265-2517-41c5-84ee-92ffbe056608"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "<ipython-input-32-85b8a4fce5fd>:5: SettingWithCopyWarning: \n",
            "A value is trying to be set on a copy of a slice from a DataFrame.\n",
            "Try using .loc[row_indexer,col_indexer] = value instead\n",
            "\n",
            "See the caveats in the documentation: https://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
            "  ncte_student_utterances['cw_similar_score'] = doc_similarity_6\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "ncte_student_utterances.head(10) #double checking dataframe contains scores"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 398
        },
        "id": "6-YWV-9RITQp",
        "outputId": "9603556a-9a90-4029-cc5c-73b75a157733"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "    OBSID            speaker  \\\n",
              "1    2119            student   \n",
              "3    2119  multiple students   \n",
              "5    2119            student   \n",
              "7    2119            student   \n",
              "10   2119            student   \n",
              "12   2119            student   \n",
              "14   2119            student   \n",
              "16   2119            student   \n",
              "18   2119            student   \n",
              "20   2119            student   \n",
              "\n",
              "                                                 text  \\\n",
              "1                                                yes.   \n",
              "3                                                yes.   \n",
              "5               can we find new ways to check it or ?   \n",
              "7           can you  the gallon? i don't know how to.   \n",
              "10  i can make it like that. that's the way it fil...   \n",
              "12                                       i'm pretty .   \n",
              "14                                            mm-hmm.   \n",
              "16                              he's using my pencil.   \n",
              "18                                              yeah.   \n",
              "20                                         at first .   \n",
              "\n",
              "                                  text_no_punctuation  \\\n",
              "1                                                 yes   \n",
              "3                                                 yes   \n",
              "5                can we find new ways to check it or    \n",
              "7              can you  the gallon i dont know how to   \n",
              "10  i can make it like that thats the way it fills...   \n",
              "12                                         im pretty    \n",
              "14                                              mmhmm   \n",
              "16                                hes using my pencil   \n",
              "18                                               yeah   \n",
              "20                                          at first    \n",
              "\n",
              "                    content_words  alltext_similar_score  cw_similar_score  \n",
              "1                             yes               1.000000          1.000000  \n",
              "3                             yes               0.250270          0.134362  \n",
              "5             find new ways check               0.823414          0.297711  \n",
              "7                gallon dont know               0.763146          0.411807  \n",
              "10  make like thats way fills gas               0.335010          0.274634  \n",
              "12                      im pretty               0.000000          0.000000  \n",
              "14                          mmhmm               0.000000          0.000000  \n",
              "16               hes using pencil               0.270560          0.149517  \n",
              "18                           yeah              -0.109455         -0.112177  \n",
              "20                          first               0.160633          0.161442  "
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-70c5583e-7f77-41e0-8c49-2c480d972f76\" class=\"colab-df-container\">\n",
              "    <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>OBSID</th>\n",
              "      <th>speaker</th>\n",
              "      <th>text</th>\n",
              "      <th>text_no_punctuation</th>\n",
              "      <th>content_words</th>\n",
              "      <th>alltext_similar_score</th>\n",
              "      <th>cw_similar_score</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>1.000000</td>\n",
              "      <td>1.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>2119</td>\n",
              "      <td>multiple students</td>\n",
              "      <td>yes.</td>\n",
              "      <td>yes</td>\n",
              "      <td>yes</td>\n",
              "      <td>0.250270</td>\n",
              "      <td>0.134362</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can we find new ways to check it or ?</td>\n",
              "      <td>can we find new ways to check it or</td>\n",
              "      <td>find new ways check</td>\n",
              "      <td>0.823414</td>\n",
              "      <td>0.297711</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>can you  the gallon? i don't know how to.</td>\n",
              "      <td>can you  the gallon i dont know how to</td>\n",
              "      <td>gallon dont know</td>\n",
              "      <td>0.763146</td>\n",
              "      <td>0.411807</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>10</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i can make it like that. that's the way it fil...</td>\n",
              "      <td>i can make it like that thats the way it fills...</td>\n",
              "      <td>make like thats way fills gas</td>\n",
              "      <td>0.335010</td>\n",
              "      <td>0.274634</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>12</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>i'm pretty .</td>\n",
              "      <td>im pretty</td>\n",
              "      <td>im pretty</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>14</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>mm-hmm.</td>\n",
              "      <td>mmhmm</td>\n",
              "      <td>mmhmm</td>\n",
              "      <td>0.000000</td>\n",
              "      <td>0.000000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>16</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>he's using my pencil.</td>\n",
              "      <td>hes using my pencil</td>\n",
              "      <td>hes using pencil</td>\n",
              "      <td>0.270560</td>\n",
              "      <td>0.149517</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>18</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>yeah.</td>\n",
              "      <td>yeah</td>\n",
              "      <td>yeah</td>\n",
              "      <td>-0.109455</td>\n",
              "      <td>-0.112177</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>20</th>\n",
              "      <td>2119</td>\n",
              "      <td>student</td>\n",
              "      <td>at first .</td>\n",
              "      <td>at first</td>\n",
              "      <td>first</td>\n",
              "      <td>0.160633</td>\n",
              "      <td>0.161442</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>\n",
              "    <div class=\"colab-df-buttons\">\n",
              "\n",
              "  <div class=\"colab-df-container\">\n",
              "    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-70c5583e-7f77-41e0-8c49-2c480d972f76')\"\n",
              "            title=\"Convert this dataframe to an interactive table.\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n",
              "    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n",
              "  </svg>\n",
              "    </button>\n",
              "\n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    .colab-df-buttons div {\n",
              "      margin-bottom: 4px;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "    <script>\n",
              "      const buttonEl =\n",
              "        document.querySelector('#df-70c5583e-7f77-41e0-8c49-2c480d972f76 button.colab-df-convert');\n",
              "      buttonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "      async function convertToInteractive(key) {\n",
              "        const element = document.querySelector('#df-70c5583e-7f77-41e0-8c49-2c480d972f76');\n",
              "        const dataTable =\n",
              "          await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                    [key], {});\n",
              "        if (!dataTable) return;\n",
              "\n",
              "        const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "          + ' to learn more about interactive tables.';\n",
              "        element.innerHTML = '';\n",
              "        dataTable['output_type'] = 'display_data';\n",
              "        await google.colab.output.renderOutput(dataTable, element);\n",
              "        const docLink = document.createElement('div');\n",
              "        docLink.innerHTML = docLinkHtml;\n",
              "        element.appendChild(docLink);\n",
              "      }\n",
              "    </script>\n",
              "  </div>\n",
              "\n",
              "\n",
              "<div id=\"df-d7a2ec77-7686-49ba-8a1b-e3e8899cb729\">\n",
              "  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-d7a2ec77-7686-49ba-8a1b-e3e8899cb729')\"\n",
              "            title=\"Suggest charts\"\n",
              "            style=\"display:none;\">\n",
              "\n",
              "<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "     width=\"24px\">\n",
              "    <g>\n",
              "        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n",
              "    </g>\n",
              "</svg>\n",
              "  </button>\n",
              "\n",
              "<style>\n",
              "  .colab-df-quickchart {\n",
              "      --bg-color: #E8F0FE;\n",
              "      --fill-color: #1967D2;\n",
              "      --hover-bg-color: #E2EBFA;\n",
              "      --hover-fill-color: #174EA6;\n",
              "      --disabled-fill-color: #AAA;\n",
              "      --disabled-bg-color: #DDD;\n",
              "  }\n",
              "\n",
              "  [theme=dark] .colab-df-quickchart {\n",
              "      --bg-color: #3B4455;\n",
              "      --fill-color: #D2E3FC;\n",
              "      --hover-bg-color: #434B5C;\n",
              "      --hover-fill-color: #FFFFFF;\n",
              "      --disabled-bg-color: #3B4455;\n",
              "      --disabled-fill-color: #666;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart {\n",
              "    background-color: var(--bg-color);\n",
              "    border: none;\n",
              "    border-radius: 50%;\n",
              "    cursor: pointer;\n",
              "    display: none;\n",
              "    fill: var(--fill-color);\n",
              "    height: 32px;\n",
              "    padding: 0;\n",
              "    width: 32px;\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart:hover {\n",
              "    background-color: var(--hover-bg-color);\n",
              "    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "    fill: var(--button-hover-fill-color);\n",
              "  }\n",
              "\n",
              "  .colab-df-quickchart-complete:disabled,\n",
              "  .colab-df-quickchart-complete:disabled:hover {\n",
              "    background-color: var(--disabled-bg-color);\n",
              "    fill: var(--disabled-fill-color);\n",
              "    box-shadow: none;\n",
              "  }\n",
              "\n",
              "  .colab-df-spinner {\n",
              "    border: 2px solid var(--fill-color);\n",
              "    border-color: transparent;\n",
              "    border-bottom-color: var(--fill-color);\n",
              "    animation:\n",
              "      spin 1s steps(1) infinite;\n",
              "  }\n",
              "\n",
              "  @keyframes spin {\n",
              "    0% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "      border-left-color: var(--fill-color);\n",
              "    }\n",
              "    20% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    30% {\n",
              "      border-color: transparent;\n",
              "      border-left-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    40% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-top-color: var(--fill-color);\n",
              "    }\n",
              "    60% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "    }\n",
              "    80% {\n",
              "      border-color: transparent;\n",
              "      border-right-color: var(--fill-color);\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "    90% {\n",
              "      border-color: transparent;\n",
              "      border-bottom-color: var(--fill-color);\n",
              "    }\n",
              "  }\n",
              "</style>\n",
              "\n",
              "  <script>\n",
              "    async function quickchart(key) {\n",
              "      const quickchartButtonEl =\n",
              "        document.querySelector('#' + key + ' button');\n",
              "      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n",
              "      quickchartButtonEl.classList.add('colab-df-spinner');\n",
              "      try {\n",
              "        const charts = await google.colab.kernel.invokeFunction(\n",
              "            'suggestCharts', [key], {});\n",
              "      } catch (error) {\n",
              "        console.error('Error during call to suggestCharts:', error);\n",
              "      }\n",
              "      quickchartButtonEl.classList.remove('colab-df-spinner');\n",
              "      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n",
              "    }\n",
              "    (() => {\n",
              "      let quickchartButtonEl =\n",
              "        document.querySelector('#df-d7a2ec77-7686-49ba-8a1b-e3e8899cb729 button');\n",
              "      quickchartButtonEl.style.display =\n",
              "        google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "    })();\n",
              "  </script>\n",
              "</div>\n",
              "\n",
              "    </div>\n",
              "  </div>\n"
            ]
          },
          "metadata": {},
          "execution_count": 33
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "**Save student utterances dataframe for analysis in R**"
      ],
      "metadata": {
        "id": "V5BAfA7CILDj"
      }
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "svkj6LmmqH6w"
      },
      "outputs": [],
      "source": [
        "#save ncte_student dataframe for analysis in R\n",
        "\n",
        "ncte_student_utterances.to_csv('ncte_student_similarityscores.csv')"
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "colab": {
      "provenance": [],
      "machine_shape": "hm"
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.9.13"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}
